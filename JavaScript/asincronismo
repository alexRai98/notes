setTimeout(function,time)

##### callbacks ###
es una funció que recibe una función y retorna una funcion
function fn(x){}
function fnt(y, callback){
  return callback(y);
}
fnt(3,fn);

### Promesas ##

const somethingsWillHappen = ()=>{
  return new Promise((resolve,reject)=>{
    if(true){
	resolve('work');
    }else
	const err = new Error('Whooop!');
	reject(err);
    }
});

}

somethigsWillHappen()
  .then(response=>console.log(response)); // work
  .catch(error => console.log(error)); // Whoooop!

/// Para ejecutar todas las promesas y que me regrese un array con los resultados

Promise.all([promise1(),promise2(),...])
  .then(response => {
	console.log('Array of results',response);
   })
  .catch(error =>{
	console.error(error);
  })


### Asyc / await ##

const doSomethingAsyns = ()=>{
  return new Promise((resolve,reject)=>{
    (true) ? setTimeout(()=> resolve('Do somenthing asyn'),3000) 
		: reject(new Error('Error'))
  })
}

const doSomething = async ()=>{
  const something = await doSomethingAsync();
  console.log(something);
}


const anotherFunction = async () => {
  try{
     const something = await doSomething();
     console.log(something)
  }catch{
     console.error(error)
  }
}

anotherFunction();
