#constructor de prototipos
function Persona(nombre,apellido,altura){
  this.nombre = nombre;
  this.apellido = apellido;
  this.altura = altura;
}

#Agregamos funciones al prototipo fn
Persona.prototype.saludar = function(){  // puede ser una arrow fuction
  console.log(`Hola, me llamo ${this.nombre}`)
}

Persona.prototype.soyAlto = function(){
  return this.altura > 1.8;
}

# se crea un nuevo objeto x que se le agrega como prototipo fn. Y ejecutará su bloque de código.
const rai = new Persona('Rai','Delgado',);
rai.saludar();
rai.soyAlto();

:eyes:
si usamos una arrow function para un prototipo el this dentro de esta hará referencia a window más no a la función constructora, así que usamos funciones normalitas.


########## Herencia prototipal #######

class Persona{

 constructor(nombre,apellido,altura){
  this.nombre = nombre;
  this.apellido = apellido;
  this.altura = altura;
 }
 saludar(){
  console.log(`Hola, me llamo ${this.nombre}`)
 }

 soyAlto(){
  return this.altura > 1.8;
 }

}

class Desarrollador extends Persona {

 constructor(nombre,apellido,altura){
  super(nombre,apellido,altura)
 }
 saludar(){
  console.log(`Hola, me llamo ${this.nombre} soy un desarrollador(a)`)
 }

}

const rai = Desarrollador('Rai','Delgado',21);
const hugo = Persona('Hugo','Alvarez',23)


#### polimorfismo prototipal #####
speak() {
    return super.speak() + this.name + ' goes meow.';
  }

